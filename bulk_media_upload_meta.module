<?php
/**
 * @file
 * Bulk Media Upload Meta Data Module
 */

/**
 * Implements hook_menu().
 */
function bulk_media_upload_meta_menu() {
  $items['admin/content/media/bulk_upload/meta'] = array(
    'title' => 'Bulk Media Upload Meta Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_media_upload_meta_admin'),
    'access arguments' => array('bulk upload media'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'bulk_media_upload_meta.admin.inc',
  );
  return $items;
}

/**
 * Reusable function for parsing iptcparse() into a human usable format
 * @param string $file_path - a VALID path from getcwd()
 * @return array the parsed meta information 
 */
function bulk_media_upload_media_parse($file_path) {
  //Result Array
  $image_meta = array('file_path'=>$file_path);
  //Pass by reference info array - our target
  $image_info = array();
  //Load up image info
  $image_size = getimagesize($file_path,$image_info);
  
  // did we get the good stuff?
  if (isset($image_info["APP13"]))
  { 
    //Parse it
    $iptc = iptcparse($image_info["APP13"]);
    //check it
    if (is_array($iptc))
    {
      if (isset($iptc["2#005"][0]))
        $image_meta['title'] = $iptc["2#005"][0]; 
      else
        $image_meta['title'] = '';
      if (isset($iptc["2#025"][0]))
        $image_meta['tags'] = implode(',',$iptc["2#025"]); 
      else
        $image_meta['tags'] = '';
      if (isset($iptc["2#055"][0]))
        $image_meta['date_created'] = $iptc["2#055"][0]; 
      else
        $image_meta['date_created'] = '';
      if (isset($iptc["2#080"][0]))
        $image_meta['photographer'] = $iptc["2#080"][0]; 
      else
        $image_meta['photographer'] = '';
      if (isset($iptc["2#085"][0]))
        $image_meta['credit_byline'] = $iptc["2#085"][0]; 
      else
        $image_meta['credit_byline'] = '';
      if (isset($iptc["2#090"][0]))
        $image_meta['city'] = $iptc["2#090"][0]; 
      else
        $image_meta['city'] = '';
      if (isset($iptc["2#090"][0]))
        $image_meta['city'] = $iptc["2#090"][0]; 
      else
        $image_meta['city'] = '';
      if (isset($iptc["2#095"][0]))
        $image_meta['state'] = $iptc["2#095"][0]; 
      else
        $image_meta['state'] = '';
      if (isset($iptc["2#101"][0]))
        $image_meta['country'] = $iptc["2#101"][0]; 
      else
        $image_meta['country'] = '';
      if (isset($iptc["2#110"][0]))
        $image_meta['source'] = $iptc["2#110"][0]; 
      else
        $image_meta['source'] = '';
      if (isset($iptc["2#120"][0]))
        $image_meta['summary'] = $iptc["2#120"][0]; 
      else
        $image_meta['summary'] = '';
    }
  }
  return $image_meta;
}

/**
 * NEEDS TO BE REFACTORED, results of 'all nighter'
 * @param type $tags
 * @return type 
 */
function bulk_media_upload_meta_scrub_tags($tags,$vid=1) {
  $new_tags = array();
  $old_tags = $tags;
  $old_tags = str_replace(';', ',', $old_tags);
  $old_tags = str_replace('-', ',', $old_tags);
  $old_tags = str_replace('_', ',', $old_tags);
  $old_tags = str_replace(' ', ',', $old_tags);
  $old_tags = explode(',',$old_tags);
  foreach($old_tags as $tag)
    if (is_string($tag)&&!is_numeric($tag))
      $new_tags[] = bulk_media_upload_meta_get_tag($tag,$vid);
  
  return $new_tags;
}

function bulk_media_upload_meta_get_tag($tag,$vid=1) {
  $tag = ucfirst($tag);
  if (is_string($tag)&&!is_numeric($tag))
  {
    $term = taxonomy_get_term_by_name($tag);
    if (count($term))
    {
      $terms_array = array_keys($term);
      return $terms_array['0'];
    }
    else
    {
      $term = new stdClass();
      $term->name = $tag;
      $term->vid = $vid;
      taxonomy_term_save($term);
      return $term->tid;
    }
  }
}

/**
 * Implements hook_node_update($node)
 * Checks for bulk upload node type then runs meta scan
 * @param type $node 
 */
function bulk_media_upload_meta_node_update($node) {
  
  if ($node->type==variable_get('bulk_media_upload_nodetype'))
  {
    bulk_media_upload_meta_node_scan($node);
  } 
}

/**
 * Perform the scanning and the setting of the node meta information
 * @param object $node
 * @param boolean $ignore_flag Ignore whether the file is flagged for scan 
 */
function bulk_media_upload_meta_node_scan($node,$ignore_flag=false) {
  if ($ignore_flag||$node->field_download_image_scan['und'][0]['value']>0)
  {
    $loaded_node = node_load($node->nid, NULL, TRUE);

    $vocab_array = bulk_media_upload_meta_get_csv_ordered_vocab();
    
    $file_path = str_replace('http://','',str_replace('https://','',file_create_url($loaded_node->field_download_image['und'][0]['uri'])));

    $file_parts = explode('/', $file_path);
    $file_parts[0] = getcwd();
    $file_path = implode('/',$file_parts);

    $meta_info  = bulk_media_upload_media_parse($file_path);

    $prefix = variable_get('bulk_media_upload_meta_setting', '');

    if ($meta_info['summary'])
      $node->body[$node->language][0]['value'] = $meta_info['summary'];
    if ($meta_info['title'])
      $node->title = truncate_utf8($meta_info['title'], 128, $wordsafe=true);

    if ($meta_info['summary']&&!$meta_info['title'])
      $node->title = truncate_utf8($meta_info['summary'], 64, $wordsafe=true);
    if ($meta_info['tags'])
    {
      $tags = $meta_info['tags'];
      $tags = bulk_media_upload_meta_scrub_tags($tags,$vocab_array['image_tags']->vid);
      
      $key = 0;
      foreach ($tags as $tag) {
        $node->field_download_image_tags[$node->language][$key]['tid'] = $tag;
        $key++;
      }
    }
    $node->field_download_image_scan[$node->language][0]['value'] = 0;

    node_save($node);      
  }
}

/**
 * This is the utility function used by both scanning button in the admin menu
 * @param boolean $ignore_flag Ignore file scan flags?
 */
function bulk_media_upload_meta_node_scan_all($ignore_flag=false) {
  $node_type = variable_get('bulk_media_upload_nodetype');
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', $node_type);
  $query->propertyOrderBy('changed');
  $query->propertyOrderBy('nid','DESC');
  $result = $query->execute();
  $nids = array_keys($result['node']);
  foreach ($nids as $nid) {
    $node = node_load($nid);
    bulk_media_upload_meta_node_scan($node,$ignore_flag);
  }
  
}

function bulk_media_upload_meta_node_scan_file() {
  $arrResult = array();
  $meta_document = variable_get('bulk_media_upload_meta_document');
  if (!$meta_document)
  {
    form_set_error('bulk_media_upload_meta_document', t('A document path is required for this funciton'));
    return;
  }
  if (!file_exists($meta_document))
  {
    form_set_error('bulk_media_upload_meta_document', t('A document does not exist at that path (check permissions)'));
    return;
  }
  $handle = fopen($meta_document, "r");
  if (!$handle) 
  {
    form_set_error('bulk_media_upload_meta_document', t('The document could not be opened (check permissions)'));
    return;
  }
  
  while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
    $arrResult[] = $data;
  }
  fclose($handle);
  
  $vocab_array = bulk_media_upload_meta_get_csv_ordered_vocab();
  
  $node_type = variable_get('bulk_media_upload_nodetype');
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', $node_type);
  $query->propertyOrderBy('changed');
  $query->propertyOrderBy('nid','DESC');
  $result = $query->execute();
  $nids = array_keys($result['node']);
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $filename = $node->field_download_image['und'][0]['filename'];

    for($i=0;$i<count($arrResult);$i++)
    {
      // First Column - Does the file name match?
      if ($filename == $arrResult[$i][0])
      {
        $idx=1;

        //  Second Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['patient_care']->vid);
          if ($tid)
            $node->field_download_image_patient[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Third Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['research']->vid);
          if ($tid)
            $node->field_download_image_research[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Forth Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['technology']->vid);
          if ($tid)
            $node->field_download_image_technology[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Fitfh Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['prevention']->vid);
          if ($tid)
            $node->field_download_image_prevention[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Sixth Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['facilities']->vid);
          if ($tid)
            $node->field_download_image_facilities[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Seventh Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['historical']->vid);
          if ($tid)
            $node->field_download_image_historical[$node->language][0]['tid'] = $tid;
        }
        $idx++;

        //  Eigth Column
        $tid = 0;
        if ($arrResult[$i][$idx]!='')
        {
          $tid = bulk_media_upload_meta_get_tag($arrResult[$i][$idx],$vocab_array['faculty_staff']->vid);
          if ($tid)
            $node->field_download_image_faculty[$node->language][0]['tid'] = $tid;
        }
        $idx++;
        
        node_save($node);
        $i=count($arrResult);
      }
    }
  }
}

function bulk_media_upload_meta_get_csv_ordered_vocab() {
  $drupal_vocabs = taxonomy_get_vocabularies();
  
  $csv_vocabs =  array(
      'image_tags'=>0,
      'patient_care'=>0,
      'research'=>0,
      'technology'=>0,
      'prevention'=>0,
      'facilities'=>0,
      'historical'=>0,
      'faculty_staff'=>0
  );
  
  $our_vocab = array();
  
  foreach($drupal_vocabs AS $vocab)
    if (isset($csv_vocabs[$vocab->machine_name]))
      $our_vocab[$vocab->machine_name] = $vocab;
  
  return $our_vocab;
}